[build-system]
requires = ["scikit-build-core", "pybind11"]
build-backend = "scikit_build_core.build"

[project]
name = "quite"
version = "1.2.0"
description="quite - the ui testing framework"
readme = "README.md"
authors = [
  { name = "Mathis Logemann", email = "mathisloge@tuta.io" },
]
requires-python = ">=3.7"

[project.optional-dependencies]
test = ["pytest", "mypy"]

[tool.scikit-build]
build-dir = "./build-python"
backport.find-python = "3.28.0"
[tool.scikit-build.cmake.define]
QUITE_BUILD_PROBES = "OFF"
QUITE_EXAMPLES = "OFF"
BUILD_SHARED_LIBS = "OFF"
BUILD_TESTING = "OFF"
CMAKE_SKIP_INSTALL_RULES = "ON"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
log_cli_level = "INFO"
filterwarnings = [
  "error",
  "ignore::pytest.PytestCacheWarning",
]
testpaths = ["test"]

[tool.ruff]
src = ["python"]

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
ignore = [
  "PLR09",    # Too many X
  "PLR2004",  # Magic comparison
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
