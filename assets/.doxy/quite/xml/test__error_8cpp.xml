<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="test__error_8cpp" kind="file" language="C++">
    <compoundname>test_error.cpp</compoundname>
    <includes local="no">boost/ut.hpp</includes>
    <includes refid="error_8hpp" local="no">quite/error.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>quite/error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>libs/core/test/test_error.cpp</label>
        <link refid="test__error_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>boost/ut.hpp</label>
      </node>
      <node id="5">
        <label>fmt/core.h</label>
      </node>
      <node id="6">
        <label>quite/quite_core_export.hpp</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd_1_1literals_1_1string__view__literals">std::literals::string_view_literals</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__error_8cpp_1a09f40d1fa42a4891056efa842f870708" prot="public" static="yes" mutable="no">
        <type>suite&lt;&quot;core::error&quot;&gt;</type>
        <definition>suite&lt;&quot;core::error&quot;&gt; _</definition>
        <argsstring></argsstring>
        <name>_</name>
        <initializer>= [] {
    &quot;formatting&quot;_test = [] {
        const <ref refid="structquite_1_1Error" kindref="compound">quite::Error</ref> error{
            .code = quite::ErrorCode::deadline_exceeded,
            .message = &quot;test message&quot;,
        };
        expect(that % &quot;(error_code: deadline_exceeded: message: test message)&quot;sv == fmt::format(&quot;{}&quot;, error));
    };
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/test/test_error.cpp" line="8" column="14" bodyfile="libs/core/test/test_error.cpp" bodystart="8" bodyend="16"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;boost/ut.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quite/error.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">quite;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::ut;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::literals::string_view_literals;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>suite&lt;</highlight><highlight class="stringliteral">&quot;core::error&quot;</highlight><highlight class="normal">&gt;<sp/>_<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;formatting&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structquite_1_1Error" kindref="compound">quite::Error</ref><sp/>error{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.code<sp/>=<sp/>quite::ErrorCode::deadline_exceeded,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>message&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect(that<sp/>%<sp/></highlight><highlight class="stringliteral">&quot;(error_code:<sp/>deadline_exceeded:<sp/>message:<sp/>test<sp/>message)&quot;</highlight><highlight class="normal">sv<sp/>==<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>error));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="16"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="libs/core/test/test_error.cpp"/>
  </compounddef>
</doxygen>
