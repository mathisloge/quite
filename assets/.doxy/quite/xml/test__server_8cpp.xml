<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="test__server_8cpp" kind="file" language="C++">
    <compoundname>test_server.cpp</compoundname>
    <includes local="no">thread</includes>
    <includes local="no">boost/ut.hpp</includes>
    <includes refid="protocol_2include_2quite_2proto_2probe_2server_8hpp" local="no">quite/proto/probe/server.hpp</includes>
    <incdepgraph>
      <node id="8">
        <label>quite/disable_copy_move.hpp</label>
        <link refid="disable__copy__move_8hpp_source"/>
      </node>
      <node id="9">
        <label>quite/service_handle.hpp</label>
        <link refid="service__handle_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>quite/proto/probe/server.hpp</label>
        <link refid="protocol_2include_2quite_2proto_2probe_2server_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>libs/protocol/tests/test_server.cpp</label>
        <link refid="test__server_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>boost/ut.hpp</label>
      </node>
      <node id="7">
        <label>entt/locator/locator.hpp</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="10">
        <label>quite/quite_protocol_export.hpp</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="2">
        <label>thread</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__server_8cpp_1ad46e4c0e91deaa7cb0ca24dfc5d1c140" prot="public" static="yes" mutable="no">
        <type>suite&lt;&quot;protocol server&quot;&gt;</type>
        <definition>suite&lt;&quot;protocol server&quot;&gt; _</definition>
        <argsstring></argsstring>
        <name>_</name>
        <initializer>= [] { 
    &quot;shutdown instant&quot;_test = [] {
        
        for (int i = 0; i &lt; 1000; ++i)
        {
            <ref refid="classquite_1_1proto_1_1Server" kindref="compound">quite::proto::Server</ref> server{&quot;unix:///tmp/grpc_probe.sock&quot;, {}, {}, {}, {}};
        }
    };
    &quot;shutdown delayed&quot;_test = [] {
        <ref refid="classquite_1_1proto_1_1Server" kindref="compound">quite::proto::Server</ref> server{&quot;unix:///tmp/grpc_probe.sock&quot;, {}, {}, {}, {}};
        std::this_thread::sleep_for(std::chrono::seconds(1));
    };
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/protocol/tests/test_server.cpp" line="7" column="14" bodyfile="libs/protocol/tests/test_server.cpp" bodystart="7" bodyend="19"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/ut.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quite/proto/probe/server.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::ut;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::literals::string_view_literals;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>suite&lt;</highlight><highlight class="stringliteral">&quot;protocol<sp/>server&quot;</highlight><highlight class="normal">&gt;<sp/>_<sp/>=<sp/>[]<sp/>{<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;shutdown<sp/>instant&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>is<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>server<sp/>can<sp/>be<sp/>created<sp/>and<sp/>destroyed<sp/>without<sp/>issues.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1000;<sp/>++i)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classquite_1_1proto_1_1Server" kindref="compound">quite::proto::Server</ref><sp/>server{</highlight><highlight class="stringliteral">&quot;unix:///tmp/grpc_probe.sock&quot;</highlight><highlight class="normal">,<sp/>{},<sp/>{},<sp/>{},<sp/>{}};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;shutdown<sp/>delayed&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classquite_1_1proto_1_1Server" kindref="compound">quite::proto::Server</ref><sp/>server{</highlight><highlight class="stringliteral">&quot;unix:///tmp/grpc_probe.sock&quot;</highlight><highlight class="normal">,<sp/>{},<sp/>{},<sp/>{},<sp/>{}};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::seconds(1));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="libs/protocol/tests/test_server.cpp"/>
  </compounddef>
</doxygen>
