<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="value__converters_8cpp" kind="file" language="C++">
    <compoundname>value_converters.cpp</compoundname>
    <includes refid="value__converters_8hpp" local="yes">value_converters.hpp</includes>
    <includes local="no">QColor</includes>
    <includes local="no">QList</includes>
    <includes local="no">QMetaType</includes>
    <includes local="no">QObject</includes>
    <includes local="no">QQmlListProperty</includes>
    <includes local="no">QQmlListReference</includes>
    <includes local="no">QQuickItem</includes>
    <includes local="no">entt/meta/container.hpp</includes>
    <includes local="no">entt/meta/factory.hpp</includes>
    <includes local="no">entt/meta/meta.hpp</includes>
    <includes local="no">private/qquickanchors_p_p.h</includes>
    <includes refid="logger_8hpp" local="no">quite/logger.hpp</includes>
    <includes refid="generic__value__class_8hpp" local="no">quite/value/generic_value_class.hpp</includes>
    <includes refid="value__registry_8hpp" local="no">quite/value/value_registry.hpp</includes>
    <includes refid="meta__qt__containers_8hpp" local="yes">meta_qt_containers.hpp</includes>
    <incdepgraph>
      <node id="14">
        <label>quite/logger.hpp</label>
        <link refid="logger_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>quite/value/generic_value_class.hpp</label>
        <link refid="generic__value__class_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>quite/value/value_registry.hpp</label>
        <link refid="value__registry_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>meta_qt_containers.hpp</label>
        <link refid="meta__qt__containers_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>libs/probeqt/value_converters.cpp</label>
        <link refid="value__converters_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>value_converters.hpp</label>
        <link refid="value__converters_8hpp_source"/>
      </node>
      <node id="3">
        <label>QColor</label>
      </node>
      <node id="4">
        <label>QList</label>
      </node>
      <node id="5">
        <label>QMetaType</label>
      </node>
      <node id="6">
        <label>QObject</label>
      </node>
      <node id="7">
        <label>QQmlListProperty</label>
      </node>
      <node id="8">
        <label>QQmlListReference</label>
      </node>
      <node id="9">
        <label>QQuickItem</label>
      </node>
      <node id="22">
        <label>entt/container/dense_map.hpp</label>
      </node>
      <node id="23">
        <label>entt/core/hashed_string.hpp</label>
      </node>
      <node id="24">
        <label>entt/locator/locator.hpp</label>
      </node>
      <node id="10">
        <label>entt/meta/container.hpp</label>
      </node>
      <node id="25">
        <label>entt/meta/context.hpp</label>
      </node>
      <node id="11">
        <label>entt/meta/factory.hpp</label>
      </node>
      <node id="12">
        <label>entt/meta/meta.hpp</label>
      </node>
      <node id="13">
        <label>private/qquickanchors_p_p.h</label>
      </node>
      <node id="27">
        <label>qcontainerfwd.h</label>
      </node>
      <node id="15">
        <label>quill/LogMacros.h</label>
      </node>
      <node id="16">
        <label>quill/Logger.h</label>
      </node>
      <node id="17">
        <label>quite/quite_core_export.hpp</label>
      </node>
      <node id="19">
        <label>string</label>
      </node>
      <node id="20">
        <label>unordered_map</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacequite">quite</innernamespace>
    <innernamespace refid="namespacequite_1_1probe">quite::probe</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="value__converters_8cpp_1ad4f2a0eb20b279363f1c37ad642a8308" prot="public" static="no">
        <name>REGISTER_QT_TYPES_FUNCTION</name>
        <param><defname>TypeName</defname></param>
        <param><defname>TypeId</defname></param>
        <param><defname>Type</defname></param>
        <initializer>register_type&lt;Type&gt;(value_registry, #Type);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/probeqt/value_converters.cpp" line="37" column="9" bodyfile="libs/probeqt/value_converters.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;value_converters.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QColor&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QList&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QMetaType&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QObject&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QQmlListProperty&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QQmlListReference&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QQuickItem&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;entt/meta/container.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;entt/meta/factory.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;entt/meta/meta.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;private/qquickanchors_p_p.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quite/logger.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quite/value/generic_value_class.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quite/value/value_registry.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;meta_qt_containers.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">DEFINE_LOGGER(value_converters)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">entt::literals;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">quite::probe</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>register_type(ValueRegistry<sp/>&amp;value_registry,<sp/>entt::hashed_string<sp/>name)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;meta_ctx<sp/>=<sp/>value_registry.context();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;type<sp/>=<sp/>entt::meta_factory&lt;T&gt;(meta_ctx)<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(name.value())</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.template<sp/>custom&lt;QMetaType&gt;(QMetaType::fromType&lt;T&gt;());</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(not<sp/>std::is_void_v&lt;T&gt;)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type.template<sp/>conv&lt;[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QVariant::fromValue&lt;T&gt;(std::forward&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(value)&gt;(value));<sp/>}&gt;();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_QT_TYPES_FUNCTION(TypeName,<sp/>TypeId,<sp/>Type)<sp/>register_type&lt;Type&gt;(value_registry,<sp/>#Type);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>register_converters(ValueRegistry<sp/>&amp;value_registry)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;meta_ctx<sp/>=<sp/>value_registry.context();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;QList&lt;QObject<sp/>*&gt;&gt;(meta_ctx)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(</highlight><highlight class="stringliteral">&quot;QObjectList&quot;</highlight><highlight class="normal">_hs)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.custom&lt;QMetaType&gt;(QMetaType::fromType&lt;QObjectList&gt;());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>QT_FOR_EACH_STATIC_PRIMITIVE_TYPE(REGISTER_QT_TYPES_FUNCTION);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;std::string&gt;(meta_ctx)<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(</highlight><highlight class="stringliteral">&quot;std::string&quot;</highlight><highlight class="normal">_hs)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.custom&lt;QMetaType&gt;(QMetaType::fromType&lt;std::string&gt;())</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.conv&lt;[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;str)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QString::fromStdString(str);<sp/>}&gt;()</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.conv&lt;[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QVariant::fromValue&lt;QString&gt;(QString::fromStdString(std::forward&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(value)&gt;(value)));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}&gt;();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;QString&gt;(meta_ctx)<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(</highlight><highlight class="stringliteral">&quot;QString&quot;</highlight><highlight class="normal">_hs)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.custom&lt;QMetaType&gt;(QMetaType::fromType&lt;QString&gt;())</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.conv&lt;&amp;QString::toStdString&gt;()</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.conv&lt;[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QVariant::fromValue&lt;QString&gt;(std::forward&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(value)&gt;(value));<sp/>}&gt;();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;QRect&gt;(meta_ctx)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(</highlight><highlight class="stringliteral">&quot;QRect&quot;</highlight><highlight class="normal">_hs)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.custom&lt;QMetaType&gt;(QMetaType::fromType&lt;QRect&gt;())</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QRect::setX,<sp/>&amp;QRect::x&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QRect::setY,<sp/>&amp;QRect::y&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QRect::setWidth,<sp/>&amp;QRect::width&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QRect::setHeight,<sp/>&amp;QRect::height&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;QRectF&gt;(meta_ctx)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(</highlight><highlight class="stringliteral">&quot;QRectF&quot;</highlight><highlight class="normal">_hs)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.custom&lt;QMetaType&gt;(QMetaType::fromType&lt;QRectF&gt;())</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QRectF::setX,<sp/>&amp;QRectF::x&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QRectF::setY,<sp/>&amp;QRectF::y&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QRectF::setWidth,<sp/>&amp;QRectF::width&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QRectF::setHeight,<sp/>&amp;QRectF::height&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;QPoint&gt;(meta_ctx)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(</highlight><highlight class="stringliteral">&quot;QPoint&quot;</highlight><highlight class="normal">_hs)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.custom&lt;QMetaType&gt;(QMetaType::fromType&lt;QPoint&gt;())</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QPoint::setX,<sp/>&amp;QPoint::x&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QPoint::setY,<sp/>&amp;QPoint::y&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;QPointF&gt;(meta_ctx)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(</highlight><highlight class="stringliteral">&quot;QPointF&quot;</highlight><highlight class="normal">_hs)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.custom&lt;QMetaType&gt;(QMetaType::fromType&lt;QPointF&gt;())</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QPointF::setX,<sp/>&amp;QPointF::x&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QPointF::setY,<sp/>&amp;QPointF::y&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;QUrl&gt;(meta_ctx)<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(</highlight><highlight class="stringliteral">&quot;QUrl&quot;</highlight><highlight class="normal">_hs)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.custom&lt;QMetaType&gt;(QMetaType::fromType&lt;QUrl&gt;())</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QUrl<sp/>&amp;url)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>url.url();<sp/>}&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;url&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QUrl<sp/>&amp;url)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>url.toDisplayString();<sp/>}&gt;(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_registry.named_property(</highlight><highlight class="stringliteral">&quot;displayString&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;QColor&gt;(meta_ctx)<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(</highlight><highlight class="stringliteral">&quot;QColor&quot;</highlight><highlight class="normal">_hs)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.custom&lt;QMetaType&gt;(QMetaType::fromType&lt;QColor&gt;())</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QColor<sp/>&amp;color)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>color.name();<sp/>}&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QColor::setAlpha,<sp/>&amp;QColor::alpha&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;alpha&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QColor::setRed,<sp/>&amp;QColor::red&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QColor::setGreen,<sp/>&amp;QColor::green&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QColor::setBlue,<sp/>&amp;QColor::blue&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;QQuickAnchorLine&gt;(meta_ctx)<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type(</highlight><highlight class="stringliteral">&quot;QQuickAnchorLine&quot;</highlight><highlight class="normal">_hs)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.custom&lt;QMetaType&gt;(QMetaType::fromType&lt;QQuickAnchorLine&gt;())</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data&lt;&amp;QQuickAnchorLine::item&gt;(value_registry.named_property(</highlight><highlight class="stringliteral">&quot;item&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>entt::meta_factory&lt;QVariant&gt;(meta_ctx).type(</highlight><highlight class="stringliteral">&quot;QVariant&quot;</highlight><highlight class="normal">_hs);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>quite::probe</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="libs/probeqt/value_converters.cpp"/>
  </compounddef>
</doxygen>
