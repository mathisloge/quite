<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classquite_1_1test_1_1Property" kind="class" language="C++" prot="public" final="yes">
    <compoundname>quite::test::Property</compoundname>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classquite_1_1test_1_1Property_1a816c6187c2f511df900c8f1be84f4c03" prot="public" static="no">
        <type>std::variant&lt; bool, std::uint64_t, std::int64_t, double, std::string, <ref refid="classquite_1_1test_1_1RemoteObject" kindref="compound">RemoteObject</ref> &gt;</type>
        <definition>using quite::test::Property::Value =  std::variant&lt;bool, std::uint64_t, std::int64_t, double, std::string, RemoteObject&gt;</definition>
        <argsstring></argsstring>
        <name>Value</name>
        <qualifiedname>quite::test::Property::Value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/quite/test/property.hpp" line="23" column="5" bodyfile="libs/testing/include/quite/test/property.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classquite_1_1test_1_1Property_1a9d77b0d1633711d0a9d59e1a69aacff6" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classquite_1_1client_1_1Property" kindref="compound">client::Property</ref> &gt;</type>
        <definition>std::shared_ptr&lt;client::Property&gt; quite::test::Property::property_</definition>
        <argsstring></argsstring>
        <name>property_</name>
        <qualifiedname>quite::test::Property::property_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/quite/test/property.hpp" line="39" column="21" bodyfile="libs/testing/include/quite/test/property.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classquite_1_1test_1_1Property_1a3c2db993f9756fa9e3b07aeff2c542e2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>quite::test::Property::Property</definition>
        <argsstring>(std::shared_ptr&lt; client::Property &gt; property)</argsstring>
        <name>Property</name>
        <qualifiedname>quite::test::Property::Property</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classquite_1_1client_1_1Property" kindref="compound">client::Property</ref> &gt;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/quite/test/property.hpp" line="21" column="14" bodyfile="libs/testing/src/property.cpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classquite_1_1test_1_1Property_1a63e410f1e41abc4e86dc22df0250d0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Property::Value</type>
        <definition>Property::Value quite::test::Property::fetch</definition>
        <argsstring>()</argsstring>
        <name>fetch</name>
        <qualifiedname>quite::test::Property::fetch</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/quite/test/property.hpp" line="24" column="21" bodyfile="libs/testing/src/property.cpp" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classquite_1_1test_1_1Property_1ac3c6667e474d1a0e6af235bd0610acfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Property::Value</type>
        <definition>Property::Value quite::test::Property::value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <qualifiedname>quite::test::Property::value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/quite/test/property.hpp" line="25" column="21" bodyfile="libs/testing/src/property.cpp" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classquite_1_1test_1_1Property_1ad21087dcd30718811f76f99dbfa46662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Property::Value</type>
        <definition>Property::Value quite::test::Property::wait_for_value</definition>
        <argsstring>(Property::Value target_value, std::chrono::milliseconds timeout)</argsstring>
        <name>wait_for_value</name>
        <qualifiedname>quite::test::Property::wait_for_value</qualifiedname>
        <param>
          <type>Property::Value</type>
          <declname>target_value</declname>
        </param>
        <param>
          <type>std::chrono::milliseconds</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Waits until the given target value has been reached or the time has been passed. Returns either the target value or the last fetched value after a timeout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>max time to wait </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Property::Value either the target value or the last fetched value after a timeout </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/quite/test/property.hpp" line="34" column="21" bodyfile="libs/testing/src/property.cpp" bodystart="107" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classquite_1_1test_1_1Property_1a608cda1e63ffce36168da6dd6a8e43c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quite::test::Property::write</definition>
        <argsstring>(Property::Value value)</argsstring>
        <name>write</name>
        <qualifiedname>quite::test::Property::write</qualifiedname>
        <param>
          <type>Property::Value</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/quite/test/property.hpp" line="36" column="10" bodyfile="libs/testing/src/property.cpp" bodystart="101" bodyend="105"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/testing/include/quite/test/property.hpp" line="18" column="1" bodyfile="libs/testing/include/quite/test/property.hpp" bodystart="19" bodyend="40"/>
    <listofallmembers>
      <member refid="classquite_1_1test_1_1Property_1a63e410f1e41abc4e86dc22df0250d0b2" prot="public" virt="non-virtual"><scope>quite::test::Property</scope><name>fetch</name></member>
      <member refid="classquite_1_1test_1_1Property_1a3c2db993f9756fa9e3b07aeff2c542e2" prot="public" virt="non-virtual"><scope>quite::test::Property</scope><name>Property</name></member>
      <member refid="classquite_1_1test_1_1Property_1a9d77b0d1633711d0a9d59e1a69aacff6" prot="private" virt="non-virtual"><scope>quite::test::Property</scope><name>property_</name></member>
      <member refid="classquite_1_1test_1_1Property_1a816c6187c2f511df900c8f1be84f4c03" prot="public" virt="non-virtual"><scope>quite::test::Property</scope><name>Value</name></member>
      <member refid="classquite_1_1test_1_1Property_1ac3c6667e474d1a0e6af235bd0610acfb" prot="public" virt="non-virtual"><scope>quite::test::Property</scope><name>value</name></member>
      <member refid="classquite_1_1test_1_1Property_1ad21087dcd30718811f76f99dbfa46662" prot="public" virt="non-virtual"><scope>quite::test::Property</scope><name>wait_for_value</name></member>
      <member refid="classquite_1_1test_1_1Property_1a608cda1e63ffce36168da6dd6a8e43c5" prot="public" virt="non-virtual"><scope>quite::test::Property</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
