<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacequite_1_1test" kind="namespace" language="C++">
    <compoundname>quite::test</compoundname>
    <innerclass refid="structquite_1_1test_1_1IExpectBuilder" prot="public">quite::test::IExpectBuilder</innerclass>
    <innerclass refid="classquite_1_1test_1_1Probe" prot="public">quite::test::Probe</innerclass>
    <innerclass refid="classquite_1_1test_1_1ProbeManager" prot="public">quite::test::ProbeManager</innerclass>
    <innerclass refid="classquite_1_1test_1_1Property" prot="public">quite::test::Property</innerclass>
    <innerclass refid="classquite_1_1test_1_1RemoteException" prot="public">quite::test::RemoteException</innerclass>
    <innerclass refid="classquite_1_1test_1_1RemoteObject" prot="public">quite::test::RemoteObject</innerclass>
    <innerclass refid="classquite_1_1test_1_1RemoteObjectExpect" prot="public">quite::test::RemoteObjectExpect</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="expect_8hpp_1a8224f86b3e34d099f9bcf588d54b1456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QUITE_TEST_EXPORT std::unique_ptr&lt; <ref refid="structquite_1_1test_1_1IExpectBuilder" kindref="compound">IExpectBuilder</ref> &gt;</type>
        <definition>std::unique_ptr&lt; IExpectBuilder &gt; quite::test::expect</definition>
        <argsstring>(RemoteObject remote_object)</argsstring>
        <name>expect</name>
        <qualifiedname>quite::test::expect</qualifiedname>
        <param>
          <type><ref refid="classquite_1_1test_1_1RemoteObject" kindref="compound">RemoteObject</ref></type>
          <declname>remote_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/src/expect.cpp" line="27" column="17" bodyfile="libs/testing/src/expect.cpp" bodystart="27" bodyend="30" declfile="libs/testing/include/quite/test/expect.hpp" declline="14" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="expect__screenshot_8cpp_1a069477ea26ac7a52004000d40d525de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool quite::test::has_screenshot_expect</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>has_screenshot_expect</name>
        <qualifiedname>quite::test::has_screenshot_expect</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/src/expect_screenshot.cpp" line="7" column="6" bodyfile="libs/testing/src/expect_screenshot.cpp" bodystart="7" bodyend="10" declfile="libs/testing/src/expect_screenshot.hpp" declline="6" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="expect__screenshot_8cpp_1a5fba3ceeb3f58c8948713159f252e228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quite::test::create_screenshot_expect</definition>
        <argsstring>(RemoteObject obj, const std::string &amp;name)</argsstring>
        <name>create_screenshot_expect</name>
        <qualifiedname>quite::test::create_screenshot_expect</qualifiedname>
        <param>
          <type><ref refid="classquite_1_1test_1_1RemoteObject" kindref="compound">RemoteObject</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/src/expect_screenshot.cpp" line="12" column="6" bodyfile="libs/testing/src/expect_screenshot.cpp" bodystart="12" bodyend="17" declfile="libs/testing/src/expect_screenshot.hpp" declline="7" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="expect__screenshot_8cpp_1ad5fa63532c7ed5666336821630518d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool quite::test::verify_screenshot_expect</definition>
        <argsstring>(RemoteObject obj, const std::string &amp;name)</argsstring>
        <name>verify_screenshot_expect</name>
        <qualifiedname>quite::test::verify_screenshot_expect</qualifiedname>
        <param>
          <type><ref refid="classquite_1_1test_1_1RemoteObject" kindref="compound">RemoteObject</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/src/expect_screenshot.cpp" line="19" column="6" bodyfile="libs/testing/src/expect_screenshot.cpp" bodystart="19" bodyend="25" declfile="libs/testing/src/expect_screenshot.hpp" declline="8" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="throw__unexpected_8hpp_1ae31f556fda67d001e514617654f4d782" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void quite::test::throw_unexpected</definition>
        <argsstring>(const Result&lt; T &gt; &amp;result)</argsstring>
        <name>throw_unexpected</name>
        <qualifiedname>quite::test::throw_unexpected</qualifiedname>
        <param>
          <type>const Result&lt; T &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/src/throw_unexpected.hpp" line="7" column="16" bodyfile="libs/testing/src/throw_unexpected.hpp" bodystart="7" bodyend="13"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/testing/include/quite/test/exceptions.hpp" line="6" column="1"/>
  </compounddef>
</doxygen>
