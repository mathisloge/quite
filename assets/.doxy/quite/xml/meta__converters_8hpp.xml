<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="meta__converters_8hpp" kind="file" language="C++">
    <compoundname>meta_converters.hpp</compoundname>
    <includes refid="meta__types_8hpp" local="no">quite/meta/meta_types.hpp</includes>
    <includes local="yes">quite/proto/meta.pb.h</includes>
    <includedby refid="meta__registry__impl_8cpp" local="yes">libs/protocol/src/client/meta_registry_impl.cpp</includedby>
    <includedby refid="meta__converters_8cpp" local="yes">libs/protocol/src/meta_converters.cpp</includedby>
    <includedby refid="rpc__meta__find__type_8cpp" local="yes">libs/protocol/src/probe/rpc_meta_find_type.cpp</includedby>
    <incdepgraph>
      <node id="10">
        <label>meta_type_id.hpp</label>
        <link refid="meta__type__id_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>quite/meta/meta_types.hpp</label>
        <link refid="meta__types_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>libs/protocol/src/meta_converters.hpp</label>
        <link refid="meta__converters_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="9">
        <label>fmt/core.h</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="12">
        <label>quite/proto/meta.pb.h</label>
      </node>
      <node id="11">
        <label>quite/quite_core_export.hpp</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="6">
        <label>unordered_map</label>
      </node>
      <node id="7">
        <label>variant</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacequite">quite</innernamespace>
    <innernamespace refid="namespacequite_1_1proto">quite::proto</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quite/meta/meta_types.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;quite/proto/meta.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">quite::proto</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal">meta::PrimitiveType<sp/>from_protocol(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MetaPrimitiveType<sp/>&amp;type);</highlight></codeline>
<codeline lineno="7"><highlight class="normal">meta::ListType<sp/>from_protocol(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MetaListType<sp/>&amp;type);</highlight></codeline>
<codeline lineno="8"><highlight class="normal">meta::MapType<sp/>from_protocol(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MetaMapType<sp/>&amp;type);</highlight></codeline>
<codeline lineno="9"><highlight class="normal">meta::ObjectTypePtr<sp/>from_protocol(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MetaObjectType<sp/>&amp;type);</highlight></codeline>
<codeline lineno="10"><highlight class="normal">meta::EnumTypePtr<sp/>from_protocol(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MetaEnumType<sp/>&amp;type);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>to_protocol(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>meta::Type<sp/>&amp;type,<sp/>MetaType<sp/>&amp;proto);</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>quite::proto</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="libs/protocol/src/meta_converters.hpp"/>
  </compounddef>
</doxygen>
